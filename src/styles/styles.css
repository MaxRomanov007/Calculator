@charset "UTF-8";
/**
  Нормализация блочной модели
 */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/**
  Убираем внутренние отступы слева тегам списков,
  у которых есть атрибут class
 */
:where(ul, ol):where([class]) {
  padding-left: 0;
}

/**
  Убираем внешние отступы body и двум другим тегам,
  у которых есть атрибут class
 */
body,
:where(blockquote, figure):where([class]) {
  margin: 0;
}

/**
  Убираем внешние отступы вертикали нужным тегам,
  у которых есть атрибут class
 */
:where(h1,
h2,
h3,
h4,
h5,
h6,
p,
ul,
ol,
dl):where([class]) {
  margin-block: 0;
}

:where(dd[class]) {
  margin-left: 0;
}

:where(fieldset[class]) {
  margin-left: 0;
  padding: 0;
  border: none;
}

/**
  Убираем стандартный маркер маркированному списку,
  у которого есть атрибут class
 */
:where(ul[class]) {
  list-style: none;
}

/**
  Обнуляем вертикальные внешние отступы параграфа,
  объявляем локальную переменную для внешнего отступа вниз,
  чтобы избежать взаимодействие с более сложным селектором
 */
p {
  --paragraphMarginBottom: 24px;
  margin-block: 0;
}

/**
  Внешний отступ вниз для параграфа без атрибута class,
  который расположен не последним среди своих соседних элементов
 */
p:where(:not([class]):not(:last-child)) {
  margin-bottom: var(--paragraphMarginBottom);
}

/**
  Упрощаем работу с изображениями
 */
img {
  display: block;
  max-width: 100%;
}

/**
  Наследуем свойства шрифт для полей ввода
 */
input,
textarea,
select,
button {
  font: inherit;
}

html {
  /**
    Пригодится в большинстве ситуаций
    (когда, например, нужно будет "прижать" футер к низу сайта)
   */
  height: 100%;
  /**
    Плавный скролл
   */
  scroll-behavior: smooth;
}

body {
  /**
    Пригодится в большинстве ситуаций
    (когда, например, нужно будет "прижать" футер к низу сайта)
   */
  min-height: 100%;
  /**
    Унифицированный интерлиньяж
   */
  line-height: 1.5;
}

/**
  Приводим к единому цвету svg-элементы
 */
svg *[fill] {
  fill: currentColor;
}

svg *[stroke] {
  stroke: currentColor;
}

/**
  Чиним баг задержки смены цвета при взаимодействии с svg-элементами
 */
svg * {
  transition-property: fill, stroke;
}

/**
  Удаляем все анимации и переходы для людей,
  которые предпочитают их не использовать
 */
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
:root {
  --color-dark: #191A23;
  --color-light: #FFFFFF;
  --color-accent: #0079ff;
  --color-gray: #a6a6a6;
  --border: 1px solid var(--color-dark);
  --border-radius: 14px;
  --border-radius-small: 10px;
  --transition-duration: 0.2s;
}

.visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  margin: -1px !important;
  border: 0 !important;
  padding: 0 !important;
  white-space: nowrap !important;
  clip-path: inset(100%) !important;
  clip: rect(0 0 0 0) !important;
  overflow: hidden !important;
}

@media (max-width: 767px) {
  .hidden-mobile {
    display: none !important;
  }
}

@media (min-width: 768px) {
  .visible-mobile {
    display: none !important;
  }
}

body {
  font-size: clamp(16px, 1.25vw, 18px);
  font-weight: 400;
  line-height: 1.28;
  color: var(--color-dark);
  background-color: var(--color-light);
}

a,
button,
input,
textarea,
svg * {
  transition-duration: var(--transition-duration);
}

.app {
  display: flex;
  justify-content: center;
  align-items: center;
}

.calculator {
  width: clamp(360px, 30vw, 450px);
  padding: 20px;
  border-radius: var(--border-radius);
  background-color: var(--color-gray);
}
.calculator__display {
  width: 100%;
  padding: 15px;
  background-color: var(--color-light);
  border-radius: var(--border-radius);
  display: flex;
  flex-direction: column;
  align-items: end;
}
.calculator__display:not(:last-child) {
  margin-bottom: 10px;
}
.calculator__result {
  font-size: clamp(16px, 1.25vw, 18px);
  color: var(--color-dark);
}
.calculator__expression {
  font-size: clamp(12px, 0.9722222222vw, 14px);
  height: 1em;
  color: var(--color-gray);
}
.calculator__numpad {
  display: grid;
  grid-template-columns: repeat(5, minmax(60px, 1fr));
  gap: 5px;
}
.calculator__button {
  border-radius: var(--border-radius-small);
}
@media (hover: hover) {
  .calculator__button:hover {
    background-color: var(--color-accent);
  }
}
@media (hover: none) {
  .calculator__button:active {
    background-color: var(--color-accent);
  }
}
.calculator__button--number {
  background-color: #40c89f;
}
.calculator__button--zero {
  background-color: #40c89f;
}
.calculator__button--clear-all {
  background-color: #e83f3f;
}
.calculator__button--clear {
  background-color: #f16e3b;
}
.calculator__button--one-operand {
  background-color: #5e3bf3;
}
.calculator__button--two-operand {
  background-color: #9d4ce8;
}
.calculator__button--equal {
  background-color: #32cd36;
}
.calculator__button--negative {
  background-color: #e848bb;
}
.calculator__button--dot {
  background-color: #329a7b;
}

/*# sourceMappingURL=styles.css.map */
